import "steammessages_base.proto";
import "steammessages_unified_base.steamclient.proto";
import "enums.proto";

option cc_generic_services = true;

message CPlayer_GetOwnedGames_Request {
	optional uint64 steamid = 1;
	optional bool include_appinfo = 2;
	optional bool include_played_free_games = 3;
	repeated uint32 appids_filter = 4;
	optional bool include_free_sub = 5;
	optional bool skip_unvetted_apps = 6 [default = true];
	optional string language = 7;
	optional bool include_extended_appinfo = 8;
}

message CPlayer_GetOwnedGames_Response {
	message Game {
		optional int32 appid = 1;
		optional string name = 2;
		optional int32 playtime_2weeks = 3;
		optional int32 playtime_forever = 4;
		optional string img_icon_url = 5;
		optional bool has_community_visible_stats = 7;
		optional int32 playtime_windows_forever = 8;
		optional int32 playtime_mac_forever = 9;
		optional int32 playtime_linux_forever = 10;
		optional int32 playtime_deck_forever = 20;
		optional uint32 rtime_last_played = 11;
		optional string capsule_filename = 12;
		optional string sort_as = 13;
		optional bool has_workshop = 14;
		optional bool has_market = 15;
		optional bool has_dlc = 16;
		optional bool has_leaderboards = 17;
		repeated uint32 content_descriptorids = 18;
		optional int32 playtime_disconnected = 19;
	}

	optional uint32 game_count = 1;
	repeated .CPlayer_GetOwnedGames_Response.Game games = 2;
}

service Player {
	rpc GetOwnedGames (.CPlayer_GetOwnedGames_Request) returns (.CPlayer_GetOwnedGames_Response);
}