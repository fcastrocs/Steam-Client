/**
 * Auto-generated file
 * Tue Aug 29 2023 17:49:38 GMT-0400 (Eastern Daylight Time)
 */

declare type Long = import("long");
type ValueOf<T> = T[keyof T];

type CMsgClientFriendMsg = {
	steamid?: Long;
	chatEntryType?: number;
	message?: Buffer;
	rtime32ServerTimestamp?: number;
	echoToSender?: boolean;
}

type CMsgClientFriendMsgIncoming = {
	steamidFrom?: Long;
	chatEntryType?: number;
	fromLimitedAccount?: boolean;
	message?: Buffer;
	rtime32ServerTimestamp?: number;
}

type CMsgClientAddFriend = {
	steamidToAdd?: Long;
	accountnameOrEmailToAdd?: string;
}

type CMsgClientAddFriendResponse = {
	eresult?: number;
	steamIdAdded?: Long;
	personaNameAdded?: string;
}

type CMsgClientRemoveFriend = {
	friendid?: Long;
}

type CMsgClientHideFriend = {
	friendid?: Long;
	hide?: boolean;
}

type CMsgClientFriendsList = {
	bincremental?: boolean;
	friends?: {
		ulfriendid?: Long;
		efriendrelationship?: number;
	}[];
	maxFriendCount?: number;
	activeFriendCount?: number;
	friendsLimitHit?: boolean;
}

type CMsgClientFriendsGroupsList = {
	bremoval?: boolean;
	bincremental?: boolean;
	friendGroups?: {
		nGroupID?: number;
		strGroupName?: string;
	}[];
	memberships?: {
		ulSteamID?: Long;
		nGroupID?: number;
	}[];
}

type CMsgClientPlayerNicknameList = {
	removal?: boolean;
	incremental?: boolean;
	nicknames?: {
		steamid?: Long;
		nickname?: string;
	}[];
}

type CMsgClientSetPlayerNickname = {
	steamid?: Long;
	nickname?: string;
}

type CMsgClientSetPlayerNicknameResponse = {
	eresult?: number;
}

type CMsgClientRequestFriendData = {
	personaStateRequested?: number;
	friends?: Long[];
}

type CMsgClientChangeStatus = {
	personaState?: number;
	playerName?: string;
	isAutoGeneratedName?: boolean;
	highPriority?: boolean;
	personaSetByUser?: boolean;
	personaStateFlags?: number;
	needPersonaResponse?: boolean;
	isClientIdle?: boolean;
}

type CMsgPersonaChangeResponse = {
	result?: number;
	playerName?: string;
}

type CMsgClientPersonaState = {
	statusFlags?: number;
	friends?: {
		friendid?: Long;
		personaState?: number;
		gamePlayedAppId?: number;
		gameServerIp?: number;
		gameServerPort?: number;
		personaStateFlags?: number;
		onlineSessionInstances?: number;
		personaSetByUser?: boolean;
		playerName?: string;
		queryPort?: number;
		steamidSource?: Long;
		avatarHash?: Buffer;
		lastLogoff?: number;
		lastLogon?: number;
		lastSeenOnline?: number;
		clanRank?: number;
		gameName?: string;
		gameid?: Long;
		gameDataBlob?: Buffer;
		clanData?: {
			oggAppId?: number;
			chatGroupId?: Long;
		};
		clanTag?: string;
		richPresence?: {
			key?: string;
			value?: string;
		}[];
		broadcastId?: Long;
		gameLobbyId?: Long;
		watchingBroadcastAccountid?: number;
		watchingBroadcastAppid?: number;
		watchingBroadcastViewers?: number;
		watchingBroadcastTitle?: string;
		isCommunityBanned?: boolean;
		playerNamePendingReview?: boolean;
		avatarPendingReview?: boolean;
	}[];
}

type CMsgClientFriendProfileInfo = {
	steamidFriend?: Long;
}

type CMsgClientFriendProfileInfoResponse = {
	eresult?: number;
	steamidFriend?: Long;
	timeCreated?: number;
	realName?: string;
	cityName?: string;
	stateName?: string;
	countryName?: string;
	headline?: string;
	summary?: string;
}

type CMsgClientCreateFriendsGroup = {
	steamid?: Long;
	groupname?: string;
	steamidFriends?: Long[];
}

type CMsgClientCreateFriendsGroupResponse = {
	eresult?: number;
	groupid?: number;
}

type CMsgClientDeleteFriendsGroup = {
	steamid?: Long;
	groupid?: number;
}

type CMsgClientDeleteFriendsGroupResponse = {
	eresult?: number;
}

type CMsgClientManageFriendsGroup = {
	groupid?: number;
	groupname?: string;
	steamidFriendsAdded?: Long[];
	steamidFriendsRemoved?: Long[];
}

type CMsgClientManageFriendsGroupResponse = {
	eresult?: number;
}

type CMsgClientAddFriendToGroup = {
	groupid?: number;
	steamiduser?: Long;
}

type CMsgClientAddFriendToGroupResponse = {
	eresult?: number;
}

type CMsgClientRemoveFriendFromGroup = {
	groupid?: number;
	steamiduser?: Long;
}

type CMsgClientRemoveFriendFromGroupResponse = {
	eresult?: number;
}

type CMsgClientGetEmoticonList = {
}

type CMsgClientEmoticonList = {
	emoticons?: {
		name?: string;
		count?: number;
		timeLastUsed?: number;
		useCount?: number;
		timeReceived?: number;
		appid?: number;
	}[];
	stickers?: {
		name?: string;
		count?: number;
		timeReceived?: number;
		appid?: number;
		timeLastUsed?: number;
		useCount?: number;
	}[];
	effects?: {
		name?: string;
		count?: number;
		timeReceived?: number;
		infiniteUse?: boolean;
		appid?: number;
	}[];
}

